#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('server:server')
var http = require('http')
var roomController = require('../controllers/rooms')
var quizController = require('../controllers/apiquiz')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)
var io = require('socket.io')(server)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log('you are listening on port', port)
})
server.on('error', onError)
server.on('listening', onListening)

let player = []

io.on('connection', socket => {
  socket.on('create-room', payload => {
    // roomController.createOne(payload)
    if (player.length >= 2) {
      socket.emit('join-game', {
        message: 'room full'
      })
    } else {
      player.push({
        name: payload.name,
        score: 0
      })
      if (player.length === 2) {
        io.emit('join-game', {
          message: 'start game',
          player: player
        })
      } else {
        socket.emit('join-game', {
          message: 'waiting for opponent',
          player: player
        })
      }
    }
  })

  // socket.on('joinroom', payload => {
  //   let login = roomController.createOne(payload)
  //   if (login.name === payload.name) {
  //     socket.emit('join-success', login)
  //   } else {
  //     socket.emit('join-failed', login.message)
  //   }
  // })

  // socket.on('game-start', async (roomName, playerName) => {
  //   let emitName = 'datagame' + roomName
  //   quizController
  //     .apiquiz()
  //     .then(({ data }) => {
  //       socket.emit(emitName, data.results)
  //     })
  //     .catch(err => {
  //       console.log(err)
  //     })
  // })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
