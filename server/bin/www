#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('server:server')
var http = require('http')
var roomController = require("../controllers/rooms")
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)
var io = require('socket.io')(server)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log('you are listening on port', port)
})
server.on('error', onError)
server.on('listening', onListening)


io.on('connection', socket => {
  socket.on('create-room', payload => {
    roomController.createOne(payload)
    socket.emit('sample', { message: 'disini udah denger' })
    console.log(payload)
  })

  socket.on('joinroom', payload => {
    let login = roomController.createOne(payload)
    if (login.name === payload.name) {
      socket.emit('join-success', login)
    } else {
      socket.emit('join-failed', login.message)
    }
  })

  socket.on("game-start", roomName => {

    // let emitName = "datagame" + roomName
    // socket.emit(emitName, dataGame)
  })
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
